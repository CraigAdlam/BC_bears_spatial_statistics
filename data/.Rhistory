knitr::opts_chunk$set(echo = TRUE)
# Load the second .Rda file into a variable
load("BC_Parks.Rda")
data_parks <- DATA
# Load the first .Rda file into a variable
load("BC_Covariates.Rda")
data_covariates <- DATA
# Read the file with read.table and fill missing values
data_bears <- read.table("occurrence.txt", header = TRUE, sep = "\t", fill = TRUE)
# View the data to check if it was loaded correctly
# View(data_bears)
dim(data_bears)
# [1] 4331  223
sapply(data_covariates, class)
# summary(data_covariates)
# View(data_covariates)
# str(data_covariates)
library(spatstat)
library(sp)
par(mfrow = c(3,2))
plot(data_covariates$Window)
plot(data_covariates$Elevation)
plot(data_covariates$Forest)
plot(data_covariates$HFI)
plot(data_covariates$Dist_Water)
# Filter the data to only include black bears in British Columbia
data_bears_BC <- subset(data_bears, stateProvince == "British Columbia")
# View(data_bears_BC)
dim(data_bears_BC)
# [1] 1916  223
bears_BC_percent <- (dim(data_bears_BC)[1] / dim(data_bears)[1]) * 100
cat(bears_BC_percent, "% of black bear sightings across Canada occurred in BC.")
library(sf)
# Filter out rows with missing coordinates
complete_rows <- complete.cases(data_bears_BC$decimalLongitude, data_bears_BC$decimalLatitude)
data_bears_BC_clean <- data_bears_BC[complete_rows, ]
# Ensure that the coordinates are numeric
data_bears_BC_clean$decimalLongitude <- as.numeric(data_bears_BC_clean$decimalLongitude)
data_bears_BC_clean$decimalLatitude <- as.numeric(data_bears_BC_clean$decimalLatitude)
# Remove rows with missing values in the coordinates
data_bears_BC_clean <- na.omit(data_bears_BC_clean[, c("decimalLongitude", "decimalLatitude")])
# Convert the cleaned data frame to an sf object
data_sf <- st_as_sf(data_bears_BC_clean, coords = c("decimalLongitude", "decimalLatitude"), crs = 4326)
# Define the target projection
projected_args <- "+proj=aea +lat_0=45 +lon_0=-126 +lat_1=50 +lat_2=58.5 +x_0=1000000 +y_0=0 +datum=NAD83 +units=m +no_defs"
# Transform the coordinates
data_bears_BC_projected <- st_transform(data_sf, crs = projected_args)
# View(data_bears_BC_projected)
dim(data_bears_BC_projected)
missing_coords_percent <- ((dim(data_bears_BC)[1] - dim(data_bears_BC_projected)[1]) / dim(data_bears_BC)[1]) * 100
# [1] 1885  222
cat(missing_coords_percent, "% of the occurences in BC were missing coordinates.")
library(maptools)
library(spatstat)
# Extract the projected coordinates from the sf object
projected_coords <- st_coordinates(data_bears_BC_projected)
# projected_coords <- data.frame(x = projected_coords[inside_window, "X"],
#                                y = projected_coords[inside_window, "Y"])
# Convert the window to an owin object
window <- as.owin.SpatialPolygons(data_covariates$Window)
# Adjust buffer to determine if illegal points lie outside the window (could only find 3)
buffer <- 100 # 10000000 includes the 3 misclassified bears way over in Quebec
# Filter out points outside the window
inside_window <- projected_coords[, "X"] >= window$xrange[1] - buffer &
projected_coords[, "X"] <= window$xrange[2] + buffer &
projected_coords[, "Y"] >= window$yrange[1] - buffer &
projected_coords[, "Y"] <= window$yrange[2] + buffer
# Create a ppp object from the projected coordinates inside the window # -------- PLOTS ILLEGAL POINTS
ppp_bears <- ppp(x = projected_coords[inside_window, "X"],
y = projected_coords[inside_window, "Y"],
window = window, checkdup = FALSE)
# Remove duplicates
ppp_bears <- ppp_bears[!duplicated(ppp_bears), ]
misclass_dup_percent <- ((dim(data_bears_BC_projected)[1] - ppp_bears$n) / dim(data_bears_BC_projected)[1]) * 100
cat("\n")
cat(misclass_dup_percent, "% were misclassified (3) or duplicated (159)\n\n")
# summary(ppp_bears)
sapply(ppp_bears, class)
# Rescale the window to units of km
win_bears_km <- rescale(Window(ppp_bears), 1000, "km")
# Intensity in bears/km^2 (could use intensity(ppp_bears) or see in the summary above)
cat("Intensity of bears per square km:", npoints(ppp_bears)/area(win_bears_km))
library(RColorBrewer)
# Plot the point pattern & assign to variable for specific information
ppp_bears_plot <- plot(ppp_bears,
main = "Point Pattern of Black Bears Across BC", # Add title to plot to be more descriptive
col = "grey90", # Make the background slightly darker for better visibility
cols = "#046C9A", # Add colors to each point for better distinction
pch = 20, # Set distinct point of appropriate size
cex = 0.8 # Decrease the size of the points for better visibility
)
# ppp_bears_plot
# Split into a 8 by 8 quadrat and count points
Q_bears <- quadratcount(ppp_bears,
nx = 8,
ny = 8)
# Q_bears
# par(mfrow = c(1, 2)) # uncomment for side by side
plot(ppp_bears, main = "Quadrat Count Plot (8x8)", pch = 20, use.marks = F, col = "grey90", cols = "#046C9A", cex = 0.6)
plot(Q_bears, cex = 0.8, col = "red", add = T)
# Compute the kernel density estimate
dens_bears <- density(Q_bears)
# Plot the histogram
hist(Q_bears, freq = FALSE, main = "Black Bear Occurrences in BC", xlab = "Number of Occurrences", xlim = c(0, 500), ylim = c(0, 0.025), breaks = 16)
# Add the kernel density estimate to the plot
lines(dens_bears, col = "blue", lwd = 2)
# Quadrat test of homogeneity
quadrat.test(Q_bears)
# Estimate intensity (lambda) in each quadrat
lambda_estimates <- data.frame(intensity(Q_bears))
lambda_estimates
# Convert to bears per sq. km
lambda_estimates_km <- lambda_estimates
lambda_estimates_km$Freq <- lambda_estimates_km$Freq * 1000
lambda_estimates_km
# Plot the output Note the use of image = TRUE
plot(intensity(Q_bears, image = T),
main = "Bear Occurrences (Quadrats)")
plot(ppp_bears,
pch = 20,
cex = 0.6,
cols = "white",
add = T)
plot(ppp_bears,
pch = 20,
cex = 0.3,
cols = "black",
add = T)
# Density estimation of lambda(u)
lambda_u_hat_bears <- density.ppp(ppp_bears)
plot(lambda_u_hat_bears,
main = "Bear Occurrences (Kernel Est.")
plot(ppp_bears,
pch = 20,
cex = 0.6,
cols = "white",
add = T)
plot(ppp_bears,
pch = 20,
cex = 0.3,
cols = "black",
add = T)
# Cross Validation Bandwidth Selection
bw_dig <- bw.diggle(ppp_bears)
bw_dig
#    sigma --- FROM PARKS
# 12703.45
#    sigma --- FROM BEARS
# 668.6026
# Likelihood Cross Validation Bandwidth Selection
bw_ppl <- bw.ppl(ppp_bears)
bw_ppl
#    sigma --- FROM PARKS
# 60165.33
#   sigma --- FROM BEARS
# 15768.64
par(mfrow = c(1,2), mar = rep(0.1,4))
plot(bw_dig, main = "CV BW Selection")
plot(bw_ppl, main = "Likelihood CV BW Selection")
plot(density(ppp_bears, sigma = bw_ppl), # Likelihood Cross Validation Bandwidth Selection
ribbon = F,
main = "Bear Occurrences (Likelihood CV)")
#   sigma
# 15768.64
# plot(ppp_bears, # COMMENT OUT, NOT AS VISIBLE --------------------------------------
#      pch = 20,
#      cex = 0.6,
#      cols = "white",
#      add = T)
#
# plot(ppp_bears,
#      pch = 20,
#      cex = 0.3,
#      cols = "black",
#      add = T)
# Density estimation of lambda(u)
lambda_u_hat_adaptive <- adaptive.density(ppp_bears, method = "kernel")
# Plot the output
plot(lambda_u_hat_adaptive,
main = "Adaptive Kernel Estimate of Intensity")
